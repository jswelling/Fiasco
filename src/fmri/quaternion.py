# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _quaternion
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class Quat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quat, name)
    __swig_setmethods__["x"] = _quaternion.Quat_x_set
    __swig_getmethods__["x"] = _quaternion.Quat_x_get
    if _newclass:x = _swig_property(_quaternion.Quat_x_get, _quaternion.Quat_x_set)
    __swig_setmethods__["y"] = _quaternion.Quat_y_set
    __swig_getmethods__["y"] = _quaternion.Quat_y_get
    if _newclass:y = _swig_property(_quaternion.Quat_y_get, _quaternion.Quat_y_set)
    __swig_setmethods__["z"] = _quaternion.Quat_z_set
    __swig_getmethods__["z"] = _quaternion.Quat_z_get
    if _newclass:z = _swig_property(_quaternion.Quat_z_get, _quaternion.Quat_z_set)
    __swig_setmethods__["w"] = _quaternion.Quat_w_set
    __swig_getmethods__["w"] = _quaternion.Quat_w_get
    if _newclass:w = _swig_property(_quaternion.Quat_w_get, _quaternion.Quat_w_set)
    def __str__(*args): return _quaternion.Quat___str__(*args)
    def __repr__(*args): return _quaternion.Quat___repr__(*args)
    def __init__(self, *args): 
        this = _quaternion.new_Quat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _quaternion.delete_Quat
    __del__ = lambda self : None;
Quat_swigregister = _quaternion.Quat_swigregister
Quat_swigregister(Quat)

trans_identity = _quaternion.trans_identity
trans_copy = _quaternion.trans_copy
trans_mult_right = _quaternion.trans_mult_right
trans_mult_left = _quaternion.trans_mult_left
trans_transpose = _quaternion.trans_transpose
trans_inverse = _quaternion.trans_inverse
trans_vec_mult = _quaternion.trans_vec_mult
trans_dump = _quaternion.trans_dump
trans_to_quat = _quaternion.trans_to_quat
quat_to_trans = _quaternion.quat_to_trans
quat_copy = _quaternion.quat_copy
quat_nrm_sqrt = _quaternion.quat_nrm_sqrt
quat_normalize = _quaternion.quat_normalize
quat_mult_right = _quaternion.quat_mult_right
quat_mult_left = _quaternion.quat_mult_left
quat_identity = _quaternion.quat_identity
quat_conjugate = _quaternion.quat_conjugate
quat_create = _quaternion.quat_create
quat_from_axis_angle = _quaternion.quat_from_axis_angle
quat_to_axis_angle = _quaternion.quat_to_axis_angle
quat_from_euler_RzRyRx = _quaternion.quat_from_euler_RzRyRx
quat_to_euler_RzRyRx = _quaternion.quat_to_euler_RzRyRx


