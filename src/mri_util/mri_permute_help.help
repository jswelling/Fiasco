*Introduction

  mri_permute is used to change the storage order of the dimensions of
  a chunk of a dataset, or an entire dataset. This operation
  rearranges the data, but does not rename it; the new arrangement is
  placed in the designated outfile. Whereas mri_remap only changes the
  header file, this function shifts the actual data around. This is
  useful to make a dimension other than "x" process the fastest during
  analysis.

  To run mri_permute use:
    mri_permute [-v] [-memlimit N-bytes] [-chunk Chunk-name] 
	      [-order Output-order] infile outfile

  or:
    mri_permute -help [topic]

*Defaults

  Unless you define the following optional elements, mri_permute will
  use these defaults:

  Memory limit (-memlimit): 52428800 bytes (50MB)
  Chunk name (-chunk): "images"
  Dimension order (-order): vtxyz


*Arguments:verbose

  [-verbose]				(-ver|v)

  Turning on the verbose option displays the progress of mri_permute
  on the screen.

*Arguments:memlimit

  [-memlimit N-bytes]               (-mem N-bytes)

  Specifies that N-bytes are available for RAM storage of data.  The
  default is 52428800 bytes (50MB).  Larger values can significantly
  speed permutation of large files, but if too large a value is used
  the program will swap excessively and things will slow down.
  This does not include the (approximately) 5000 bytes of overhead
  storage required by the program itself.  The default can be
  changed by setting the value of the environment variable
  F_MEMSIZE_HINT
     
*Arguments:chunk

  [-chunk Chunk-name]              (-chu|c Chunk-name)

  Specifies that "Chunk-name" is the chunk of the dataset whose
  dimensions are to be re-ordered.  Default value is "images".

*Arguments:order

  [-order Output-order]            (-o Output-order)

  Specifies that the dimension order for "Chunk-name" in the output
  dataset is "Output-order".  Default value is "vtxyz".

  Note: Output-order must contain all of the same dimensions letters
  as the Chunk-name.dimensions key.  For example, if "Chunk-name" has
  dimensions "vxyzt", its order can be changed to "vtxyz", but not to
  "txyz".

*Arguments:infile

  Ex: Unpermuted

  The value of infile specifies the input dataset. This argument is required.

*Arguments:outfile

  Ex: Permuted

  The value of outfile specifies the output dataset.  This argument is
  required.

*Calculation

  If enough RAM is available to read in two copies of the
    dataset, then a copy is read in, permuted, and then written.
  If there is only enough RAM available to read in one copy of
    the dataset (plus a little bit extra), then a copy is read
    in, and then written out piecemeal.
  If there is not enough RAM to read in even one copy of the
    dataset, then as much as possible is read in, written out
    piecemeal, and repeated until finished.

*Environment

  If the environment variable F_MEMSIZE_HINT is a valid integer, its
  value will be used as the default for -memlimit.

*Examples

  Consider the dataset "forward" for the following examples.  The
  output file is "backward".

  To use the most basic form of mri_permute, including all the
  defaults, I would say:

  mri_permute forward backward

  In this example, I am reordering the chunk "images" in the "forward"
  file to have the dimension string "vtxyz", and am assuming 50MB of
  storage. All this will come together in the new outfile, "backward".

  mri_permute -mem 43 -c upsidedown -o txyzv forward backward

  Using 43 bytes of storage is comical, but for the sake of an extreme
  example, it would take a very long time to run this command. If
  "-mem 43" is not present, the command would assume 50MB of space,
  and would be much more agreeable.  But as it stands, the chunk
  "upsidedown" within the file "forward" is going to be reordered as
  "txyzv" in the outfile "backwards". Sometime in the next millennium.

