# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_quaternion')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_quaternion')
    _quaternion = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_quaternion', [dirname(__file__)])
        except ImportError:
            import _quaternion
            return _quaternion
        if fp is not None:
            try:
                _mod = imp.load_module('_quaternion', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _quaternion = swig_import_helper()
    del swig_import_helper
else:
    import _quaternion
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Quat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quat, name)
    __swig_setmethods__["x"] = _quaternion.Quat_x_set
    __swig_getmethods__["x"] = _quaternion.Quat_x_get
    if _newclass:
        x = _swig_property(_quaternion.Quat_x_get, _quaternion.Quat_x_set)
    __swig_setmethods__["y"] = _quaternion.Quat_y_set
    __swig_getmethods__["y"] = _quaternion.Quat_y_get
    if _newclass:
        y = _swig_property(_quaternion.Quat_y_get, _quaternion.Quat_y_set)
    __swig_setmethods__["z"] = _quaternion.Quat_z_set
    __swig_getmethods__["z"] = _quaternion.Quat_z_get
    if _newclass:
        z = _swig_property(_quaternion.Quat_z_get, _quaternion.Quat_z_set)
    __swig_setmethods__["w"] = _quaternion.Quat_w_set
    __swig_getmethods__["w"] = _quaternion.Quat_w_get
    if _newclass:
        w = _swig_property(_quaternion.Quat_w_get, _quaternion.Quat_w_set)

    def __str__(self):
        return _quaternion.Quat___str__(self)

    def __repr__(self):
        return _quaternion.Quat___repr__(self)

    def __init__(self, x, y, z, w):
        this = _quaternion.new_Quat(x, y, z, w)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _quaternion.delete_Quat
    __del__ = lambda self: None
Quat_swigregister = _quaternion.Quat_swigregister
Quat_swigregister(Quat)


def trans_identity(t_out):
    return _quaternion.trans_identity(t_out)
trans_identity = _quaternion.trans_identity

def trans_copy(t_out, t_in):
    return _quaternion.trans_copy(t_out, t_in)
trans_copy = _quaternion.trans_copy

def trans_mult_right(t, factor):
    return _quaternion.trans_mult_right(t, factor)
trans_mult_right = _quaternion.trans_mult_right

def trans_mult_left(factor, t):
    return _quaternion.trans_mult_left(factor, t)
trans_mult_left = _quaternion.trans_mult_left

def trans_transpose(t):
    return _quaternion.trans_transpose(t)
trans_transpose = _quaternion.trans_transpose

def trans_inverse(invT, T):
    return _quaternion.trans_inverse(invT, T)
trans_inverse = _quaternion.trans_inverse

def trans_vec_mult(factor, v):
    return _quaternion.trans_vec_mult(factor, v)
trans_vec_mult = _quaternion.trans_vec_mult

def trans_dump(ofile, t):
    return _quaternion.trans_dump(ofile, t)
trans_dump = _quaternion.trans_dump

def trans_to_quat(q_out, t):
    return _quaternion.trans_to_quat(q_out, t)
trans_to_quat = _quaternion.trans_to_quat

def quat_to_trans(t_out, q, dx, dy, dz):
    return _quaternion.quat_to_trans(t_out, q, dx, dy, dz)
quat_to_trans = _quaternion.quat_to_trans

def quat_copy(q_out, q_in):
    return _quaternion.quat_copy(q_out, q_in)
quat_copy = _quaternion.quat_copy

def quat_nrm_sqrt(result, q_in):
    return _quaternion.quat_nrm_sqrt(result, q_in)
quat_nrm_sqrt = _quaternion.quat_nrm_sqrt

def quat_normalize(q):
    return _quaternion.quat_normalize(q)
quat_normalize = _quaternion.quat_normalize

def quat_mult_right(q, factor):
    return _quaternion.quat_mult_right(q, factor)
quat_mult_right = _quaternion.quat_mult_right

def quat_mult_left(factor, q):
    return _quaternion.quat_mult_left(factor, q)
quat_mult_left = _quaternion.quat_mult_left

def quat_identity(q):
    return _quaternion.quat_identity(q)
quat_identity = _quaternion.quat_identity

def quat_conjugate(q):
    return _quaternion.quat_conjugate(q)
quat_conjugate = _quaternion.quat_conjugate

def quat_create(q, x, y, z, w_pos):
    return _quaternion.quat_create(q, x, y, z, w_pos)
quat_create = _quaternion.quat_create

def quat_from_axis_angle(q, x, y, z, theta):
    return _quaternion.quat_from_axis_angle(q, x, y, z, theta)
quat_from_axis_angle = _quaternion.quat_from_axis_angle

def quat_to_axis_angle(q, x, y, z, theta):
    return _quaternion.quat_to_axis_angle(q, x, y, z, theta)
quat_to_axis_angle = _quaternion.quat_to_axis_angle

def quat_from_euler_RzRyRx(q, x_angle, y_angle, z_angle):
    return _quaternion.quat_from_euler_RzRyRx(q, x_angle, y_angle, z_angle)
quat_from_euler_RzRyRx = _quaternion.quat_from_euler_RzRyRx

def quat_to_euler_RzRyRx(q, x_angle, y_angle, z_angle):
    return _quaternion.quat_to_euler_RzRyRx(q, x_angle, y_angle, z_angle)
quat_to_euler_RzRyRx = _quaternion.quat_to_euler_RzRyRx
# This file is compatible with both classic and new-style classes.


